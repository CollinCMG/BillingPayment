@using Microsoft.AspNetCore.Components.Forms

@if (BalanceAmount > 0 || CurrentDueAmount > 0)
{
    <div class="payment-options-outer">
        <div class="payment-options-card">
            <div class="pay-section-instructions mb-3">
                Please select a payment amount and then click <b>Pay Now</b> to continue.
            </div>
            <EditForm Model="this">
                <InputRadioGroup @bind-Value="SelectedOption">
                    <div class="modern-pay-radio-row">
                        <InputRadio id="accountBalance" Value="PaymentOption.AccountBalance" />
                        <label for="accountBalance">
                            Account Balance: <span class="highlight-amount">@BalanceAmount.ToString("C")</span>
                        </label>
                    </div>
                    <div class="modern-pay-radio-row">
                        <InputRadio id="minimumDue" Value="PaymentOption.MinimumDue" />
                        <label for="minimumDue">
                            Minimum Due: <span class="highlight-amount">@CurrentDueAmount.ToString("C")</span>
                        </label>
                        <span class="pay-date">
                            (On or before
                            @if (!string.IsNullOrWhiteSpace(DueDate))
                            {
                                if (DateTime.TryParse(DueDate, out var parsedDate))
                                {
                                    @parsedDate.ToString("MM/dd/yyyy")
                                }
                                else
                                {
                                    @DueDate
                                }
                            }
                            else
                            {
                                @("-")
                            }
                            )
                        </span>
                    </div>
                    <div class="modern-pay-radio-row">
                        <InputRadio id="other" Value="PaymentOption.Other" />
                        <label for="other">
                            Other:
                        </label>
                        <input type="number" min="0.01" step="0.01"
                               @bind="_otherAmount"
                               disabled="@(SelectedOption != PaymentOption.Other)"
                               class="other-amount-input" />
                        @if (SelectedOption == PaymentOption.Other && (_otherAmount is null || _otherAmount <= 0))
                        {
                            <span class="text-danger ml-2">Amount must be greater than zero.</span>
                        }
                    </div>
                </InputRadioGroup>
            </EditForm>
            <div class="payment-options-footer mt-3" style="display: flex; justify-content: center;">
                <button class="btn btn-primary pay-now-btn" @onclick="Pay" disabled="@(!CanPay)">Pay Now</button>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-info mt-3">
        There is no balance due at this time. Thank you!
    </div>
}

@code {
    [Parameter] public string? AccountNo { get; set; }
    [Parameter] public decimal BalanceAmount { get; set; }
    [Parameter] public decimal CurrentDueAmount { get; set; }
    [Parameter] public string? DueDate { get; set; }
    [Parameter] public EventCallback<decimal> OnPay { get; set; }

    private PaymentOption? SelectedOption = null;
    private decimal? _otherAmount;

    private bool CanPay =>
        (SelectedOption == PaymentOption.AccountBalance && BalanceAmount > 0)
        || (SelectedOption == PaymentOption.MinimumDue && CurrentDueAmount > 0)
        || (SelectedOption == PaymentOption.Other && _otherAmount.HasValue && _otherAmount > 0);

    private decimal SelectedAmount =>
        SelectedOption == PaymentOption.AccountBalance ? BalanceAmount :
        SelectedOption == PaymentOption.MinimumDue ? CurrentDueAmount :
        SelectedOption == PaymentOption.Other ? (_otherAmount ?? 0) : 0;

    private async Task Pay()
    {
        if (CanPay)
        {
            await OnPay.InvokeAsync(SelectedAmount);
        }
    }

    private enum PaymentOption
    {
        AccountBalance,
        MinimumDue,
        Other
    }
}
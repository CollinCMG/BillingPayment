@using BillingPayment.Components.Controls
@using BillingPayment.Components.Modals
@using BillingPayment.Enums
@using BillingPayment.Models
@using Microsoft.AspNetCore.Authorization

@inject BillingPayment.Services.InvoiceService InvoiceService
@inject IJSRuntime JS

@rendermode InteractiveServer
@attribute [Authorize]
@page "/"

<PageTitle>Invoice Payment</PageTitle>
@* Loading Modal *@
@if (ShowLoadingModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block modal-centered" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-centered-content">
                <div class="modal-body">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div>
                        <strong>Loading Invoice for @accountNo</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div class="invoice-main-container">
    <div class="invoice-header-container">
        <BubbleHeader SelectedMemberType="@selectedMemberType"
                      SelectedMemberTypeChanged="OnMemberTypeChangedAsync"
                      AccountNo="@accountNo"
                      InvoiceNumber="@Summary?.InvoiceNumber"
                      DueDate="@Summary?.DueDate" />
    </div>
    <div class="invoice-bubble-container">
        <BubbleRow Summary="Summary" InvoiceService="InvoiceService" />
    </div>
    <div class="invoice-table-container">
        @if (!ShowLoadingModal && string.IsNullOrWhiteSpace(ApiError) && Summary?.Details?.Count > 0)
        {
            <BubbleTable Details="Summary.Details"
                         Title="Account Summary"
                         OnPayNow="ShowModal"
                         ShowPayNow="true" />
        }
    </div>
    <PaymentModal Show="@ShowPayModal"
                  AccountNo="@accountNo"
                  BalanceAmount="@(Summary?.AccountBalance ?? 0)"
                  CurrentDueAmount="@(Summary?.MinimumDue ?? 0)"
                  DueDate="@(Summary?.DueDate?.ToString("MM/dd/yyyy"))"
                  OnCancel="HideModal"
                  OnPay="HandlePayment" />
</div>

@code {
    private string? ApiError;
    private bool ShowLoadingModal = false;

    private string accountNo = string.Empty;
    private MemberType selectedMemberType = MemberType.Chancery;
    private bool ShowPayModal = false;
    private InvoiceSummary? Summary;

    protected override async Task OnInitializedAsync()
    {
        accountNo = InvoiceService.GetFormattedMemberKey(selectedMemberType);
        await LoadInvoiceSummaryAsync();
    }

    private void LoadAccountBalances()
    {
        if (Summary != null)
        {
            Summary.Details = new List<InvoiceSummaryDetail>();
            InvoiceService.PopulateDummyInvoices(Summary.Details);
        }
    }

    private async Task LoadInvoiceSummaryAsync()
    {
        ShowLoadingModal = true;
        ApiError = null;

        var loadTask = InvoiceService.GetInvoiceSummaryAsync(accountNo, selectedMemberType);
        await Task.Delay(500); // Ensure modal is visible for at least 500ms to fake data

        try
        {
            Summary = await loadTask;
            LoadAccountBalances();
        }
        catch (Exception ex)
        {
            ApiError = ex.Message;
        }
        finally
        {
            ShowLoadingModal = false;
        }
    }

    private void ShowModal() => ShowPayModal = true;
    private void HideModal() => ShowPayModal = false;

    private async Task HandlePayment(decimal amount)
    {
        ShowPayModal = false;
        await JS.InvokeVoidAsync("alert", $"TEST: Amount {amount.ToString("C")} To be paid");
        // Place payment logic here
    }

    // Updated to match HeaderBubble's expected signature
    private async Task OnMemberTypeChangedAsync(MemberType newType)
    {
        if (selectedMemberType != newType)
        {
            selectedMemberType = newType;
            accountNo = InvoiceService.GetFormattedMemberKey(selectedMemberType);
            Summary = null;
            StateHasChanged();
            await LoadInvoiceSummaryAsync();
        }
    }
}
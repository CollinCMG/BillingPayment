@using BillingPayment.Components.Controls
@using BillingPayment.Components.Modals
@using BillingPayment.Enums
@using BillingPayment.Models
@using Microsoft.AspNetCore.Authorization

@inject IConfiguration Configuration
@inject BillingPayment.Services.InvoiceService InvoiceService
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS
@inject IWebHostEnvironment Env

@rendermode InteractiveServer
@attribute [Authorize]
@page "/"

<PageTitle>Invoice Payment</PageTitle>

<div class="invoice-main-container">
    <div class="invoice-header-section">
        @if (!string.IsNullOrWhiteSpace(ApiError))
        {
            <p class="text-danger">API Error: @ApiError</p>
        }
        else if (Summary?.Details?.Count > 0)
        {
            <!-- Account Header -->
            <div class="account-header">
                <div class="account-header-info">
                    <span class="account-header-label">Member Type</span>
                    <span>
                        <select class="modern-dropdown" @onchange="OnMemberTypeChangedAsync">
                            @foreach (var type in Enum.GetValues<MemberType>())
                            {
                                <option value="@type" selected="@(type == selectedMemberType)">
                                    @type
                                </option>
                            }
                        </select>
                    </span>
                </div>
                <div class="account-header-info">
                    <span class="account-header-label">ACCOUNT #</span>
                    <span class="account-header-value">@accountNo</span>
                </div>
                <div class="account-header-info">
                    <span class="account-header-label">InvoiceNumber #</span>
                    <span class="account-header-value">@Summary?.InvoiceNumber</span>
                </div>
                <div class="account-header-info">
                    <span class="account-header-label">PAYMENT DUE ON</span>
                    <span class="account-header-due">
                        @(Summary?.DueDate?.ToString("MMMM dd, yyyy") ?? "-")
                    </span>
                </div>
            </div>

            <!-- Summary Cards -->
            <BubbleRow Summary="Summary" InvoiceService="InvoiceService" />
        }
    </div>

    <div class="invoice-table-section">
        @if (!ShowLoadingModal && string.IsNullOrWhiteSpace(ApiError) && Summary?.Details?.Count > 0)
        {
            <div class="section-container">
                <div class="section-title-row">
                    <div class="section-title">Account Summary</div>
                    <button type="button" class="modern-pay-btn" @onclick="ShowModal">
                        Make Payment
                    </button>
                </div>
                <table class="invoice-table-header">
                    <thead>
                        <tr>
                            <th>Transaction Date</th>
                            <th>Cert./Pol. #</th>
                            <th>Description</th>
                            <th>Transaction/Installment Amount</th>
                            <th>Credits and Payments Applied</th>
                            <th>Minimum Due</th>
                        </tr>
                    </thead>
                </table>
                <div class="invoice-table-scroll">
                    <table class="invoice-table-body">
                        <tbody>
                            @foreach (var item in Summary.Details)
                            {
                                <tr>
                                    <td>@(item.TransactionDate?.ToString("MM/dd/yyyy") ?? "")</td>
                                    <td>@item.CertPolNo</td>
                                    <td>@item.Description</td>
                                    <td>@item.TransactionAmount.ToString("C")</td>
                                    <td class="credits-payments-applied" style="color:@(item.CreditsAndPaymentsApplied < 0 ? "red" : "inherit")">
                                        @item.CreditsAndPaymentsApplied.ToString("C")
                                    </td>
                                    <td>@item.MinimumDue.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@if (ShowLoadingModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block modal-centered" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-centered-content">
                <div class="modal-body">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div>
                        <strong>Loading Invoice for @accountNo</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<PaymentModal
    Show="@ShowPayModal"
    AccountNo="@accountNo"
    BalanceAmount="@(Summary?.AccountBalance ?? 0)"
    CurrentDueAmount="@(Summary?.MinimumDue ?? 0)"
    DueDate="@(Summary?.DueDate?.ToString("yyyy-MM-dd") ?? string.Empty)"
    OnCancel="HideModal"
    OnPay="HandlePayment" />

@code {
    private string? ApiError;
    private bool ShowLoadingModal = false;

    private string accountNo = string.Empty;
    private MemberType selectedMemberType = MemberType.Chancery;
    private bool ShowPayModal = false;
    private InvoiceSummary? Summary;

    protected override async Task OnInitializedAsync()
    {
        accountNo = InvoiceService.GetFormattedMemberKey(selectedMemberType, HttpContextAccessor, Configuration, Env);
        await LoadInvoiceSummaryAsync();
    }

    private void LoadAccountBalances()
    {
        if (Summary != null)
        {
            Summary.Details = new List<InvoiceSummaryDetail>();
            InvoiceService.PopulateDummyInvoices(Summary.Details);
        }
    }

    private async Task LoadInvoiceSummaryAsync()
    {
        ShowLoadingModal = true;
        ApiError = null;
        StateHasChanged(); 

        try
        {
            Summary = await InvoiceService.GetInvoiceSummaryAsync(accountNo, selectedMemberType);
            LoadAccountBalances();
        }
        catch (Exception ex)
        {
            ApiError = ex.Message;
        }
        finally
        {
            ShowLoadingModal = false;
        }
    }

    private void ShowModal() => ShowPayModal = true;
    private void HideModal() => ShowPayModal = false;

    private async Task HandlePayment(decimal amount)
    {
        ShowPayModal = false;
        await JS.InvokeVoidAsync("alert", $"TEST: Amount {amount.ToString("C")} To be paid");
        // Place payment logic here
    }

    private async Task OnMemberTypeChangedAsync(ChangeEventArgs e)
    {
        if (Enum.TryParse<MemberType>(e.Value?.ToString(), out var newType) && selectedMemberType != newType)
        {
            selectedMemberType = newType;
            accountNo = InvoiceService.GetFormattedMemberKey(selectedMemberType, HttpContextAccessor, Configuration, Env);
            Summary = null;
            StateHasChanged(); 
            await LoadInvoiceSummaryAsync();
        }
    }
}